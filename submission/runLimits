#!/usr/bin/env python
import os
    
def cleanCMSSWDirs(envvar):
    cmsswRelDir = os.environ["CMSSW_RELEASE_BASE"]
    entries=envvar.split(":")
    newEnv=""
   # print "cmss dir ",cmsswRelDir
    for entry in entries:
    #    print entry
        if entry.find(cmsswRelDir)==-1:
    #        print "accepted"
            if newEnv!="": newEnv=newEnv+":"
            newEnv=newEnv+entry
    return newEnv

def setNewEnvVarWithCMSSWClean(envVarName,rootPath):
    envVarVal=os.environ.get(envVarName)
    newVal = cleanCMSSWDirs(envVarVal)

    os.environ[envVarName]=rootPath+":"+newVal


def appendToEnvVar(envVarName,strToAppend):
    os.environ[envVarName]+=":"+strToAppend

def setupEnv(rootPath):
    os.environ["ROOTSYS"]=rootPath
    os.environ["ROOFITSYS"]=rootPath
    os.environ["ROOT_INCLUDE"]=rootPath+"/include"


    setNewEnvVarWithCMSSWClean("PATH",rootPath+"/bin")
    setNewEnvVarWithCMSSWClean("LD_LIBRARY_PATH",rootPath+"/lib")
    setNewEnvVarWithCMSSWClean("PYTHONPATH",rootPath+"/lib")
    setNewEnvVarWithCMSSWClean("ROOT_INCLUDE_PATH",rootPath+"/include")

    appendToEnvVar("ROOT_INCLUDE_PATH",os.getcwd()+"/include")
    scramArch = os.environ.get("SCRAM_ARCH")
    releaseBase = os.environ.get("CMSSW_RELEASE_BASE")
    appendToEnvVar("LD_LIBRARY_PATH",releaseBase+"/external/"+scramArch+"/lib")
    appendToEnvVar("LD_LIBRARY_PATH","./libs/"+scramArch)  
    appendToEnvVar("LD_LIBRARY_PATH","./")  

    appendToEnvVar("PATH","./bin/"+scramArch)

    envVarsToPrint = ["ROOTSYS","ROOFITSYS","ROOT_INCLUDE_PATH","LD_LIBRARY_PATH","PATH"]
    for envVarName in envVarsToPrint :
        print envVarName,os.environ[envVarName]

   # import subprocess
   # print subprocess.Popen(["which","root"],stdout=subprocess.PIPE).communicate()[0].splitlines()
        

#import argparse
#parser = argparse.ArgumentParser(description='turns the limit output into a nice ttree')
#parser.add_argument('tgzFilename',type=str)
#args = parser.parse_args()
print "STARTING SCRIPT"
import sys
for arg in sys.argv:
    print arg

import FWCore.ParameterSet.VarParsing as VarParsing
args = VarParsing.VarParsing ('analysis')
args.register('tarFile',"gridPack.tar", 
               VarParsing.VarParsing.multiplicity.singleton,
               VarParsing.VarParsing.varType.string,          
               "input tar file")
args.register('outputTag',  "test", 
              VarParsing.VarParsing.multiplicity.singleton,
              VarParsing.VarParsing.varType.string,          
              "output tag")
args.register('config', "ICHEPDimuon", 
              VarParsing.VarParsing.multiplicity.singleton,
              VarParsing.VarParsing.varType.string,          
              "config name")
args.register('mass', 4500, 
              VarParsing.VarParsing.multiplicity.singleton,
              VarParsing.VarParsing.varType.float,          
              "resonance mass")
args.register('nToys', 10, 
              VarParsing.VarParsing.multiplicity.singleton,
              VarParsing.VarParsing.varType.int,          
              "number of limits to calculate")
args.register('nIter', 500000, 
              VarParsing.VarParsing.multiplicity.singleton,
              VarParsing.VarParsing.varType.int,          
              "number of iterations")
args.register('expected', 0, 
              VarParsing.VarParsing.multiplicity.singleton,
              VarParsing.VarParsing.varType.int,          
              "expected limits? ")


args.parseArguments()


import tarfile
tar = tarfile.open(args.tarFile,"r")
tar.extractall()
tar.close()
import glob, ROOT
for f in glob.glob("userfuncs/*.cxx"):
	ROOT.gSystem.Load(f)

import subprocess

print os.listdir(os.getcwd())
print os.listdir("dataCards_%s_%s"%(args.config,args.outputTag))
ws = "dataCards_%s_%s/%s_combined_%s.root"%(args.config,args.outputTag,args.config,str(int(args.mass)))

if args.expected:
	limitArgs=["./combine","-d","%s"%ws,"-M","MarkovChainMC", "-n" "%s"%args.config , "-m",str(int(args.mass)), "-i", str(args.nIter) , "--tries", "1",  "-t", str(args.nToys), "--prior","flat","--rMax","40","--LoadLibrary","userfuncs/ZPrimeMuonBkgPdf_cxx.so","--LoadLibrary","userfuncs/PowFunc_cxx.so"]
	mvCmd = ["mv higgsCombine%s.MarkovChainMC* expectedLimit_%s_%s_%d.root"%(args.config,args.config,args.outputTag,int(args.mass))]
else:
	limitArgs=["./combine","-d","%s"%ws,"-M","MarkovChainMC", "-n" "%s"%args.config , "-m",str(int(args.mass)), "-i", str(args.nIter), "--tries", str(args.nToys) ,  "--prior","flat","--rMax","40","--LoadLibrary","userfuncs/ZPrimeMuonBkgPdf_cxx.so","--LoadLibrary","userfuncs/PowFunc_cxx.so"]
	mvCmd = ["mv higgsCombine%s.MarkovChainMC* observedLimit_%s_%s_%d.root"%(args.config,args.config,args.outputTag,int(args.mass))]

result= subprocess.Popen(limitArgs,stdout=subprocess.PIPE).communicate()[0].splitlines()
for line in result:
    print line

subprocess.call(mvCmd,shell=True)

print os.listdir(os.getcwd())
