#!/bin/bash

#echo "first arg: "$1
DATE=`date +%Y%m%d`
CONFIG=$1
LABEL=$2
SRC=$3
DATACARDSTUB=$4
MIN=$5
MAX=$6
STEP=$7
TAG=$8
echo ${SRC}
echo $DATACARDSTUB
echo $MIN
echo $MAX
echo $STEP
echo $LABEL
ARGS=("$@")
LIBPART=""
END=$#
for ((i=8;i<END;i++)); do
    LIBPART+=" --LoadLibrary "
    echo ${ARGS[$i]}
    LIBPART+=${ARGS[$i]}
done
echo $LIBPART

Name=${CONFIG}${LABEL:1}


# PBS8parameters
#PBS -q cms
#PBS -N obslimit_$m-$DATE-$Run
#PBS -l walltime=06:00:00
# Send me an email on  a=abort, b=begin, e=end
##PBS -m e
#PBS -e /home/bradburn/output/obslimit_$m-$DATE-$Run.err
#PBS -o /home/bradburn/output/obslimit_$m-$DATE-$Run.log
# Merge standard output and error streams 
#PBS -j oe
#PBS -r n
#PBS -V
# ---------------------------------------------------------
#
cd $PBS_O_WORKDIR
set nonomatch

echo ""
echo "Job is running on `uname -a`"
set processor = `sort /proc/cpuinfo | uniq | gawk -F: '(substr($1,1,10)=="model name"){print $2}'`
set rate = `sort /proc/cpuinfo | uniq | gawk -F: '(substr($1,1,7)=="cpu MHz"){print substr($2,1,6)}'`
echo "Processor info : " $processor $rate "MHz"
set start = `date`
echo "Job started on `date`"
echo ""

echo ------------------------------------------------------
echo PBS: qsub is running on $PBS_O_HOST
echo PBS: originating queue is $PBS_O_QUEUE
echo PBS: executing queue is $PBS_QUEUE
echo PBS: working directory is $PBS_O_WORKDIR
echo PBS: execution mode is $PBS_ENVIRONMENT
echo PBS: job identifier is $PBS_JOBID
echo PBS: job name is $PBS_JOBNAME
echo PBS: current home directory is $PBS_O_HOME
echo ------------------------------------------------------

#
#----------------------------------------------------------
# s e t   t h e   r u n t i m e   e n v i r o n m e n t
#----------------------------------------------------------
#
export SRCDIR=$SRC/dataCards_$Name
export OUTDIR=$SRC/results_$Name
if [[ $DATACARD == *"binned"* ]]
then
  export OUTDIR=$SRC/results_${Name}_binned;
fi

export ID=`echo ${PBS_JOBID} | awk -F "." '{print $1}'`
export WORKDIR=/tmp/${ID}

echo " "
echo "Input directory is " $SRCDIR
echo "Output directory is : " $OUTDIR
echo " "

#
#----------------------------------------------------------
# s e t   t h e   r u n t i m e   e n v i r o n m e n t
#----------------------------------------------------------
#
source /cvmfs/cms.cern.ch/cmsset_default.sh
#cd ${SRCDIR}/src
#echo "Current directory is : " $SRCDIR/src
eval `scramv1 runtime -sh`
#source /home/sfolguer/StatsRoot/bin/thisroot.sh
#cd ZPrimeStats
cd ${SRCDIR}

#----------------------------------------------------------
# c o p y   e x e   a n d   c o n f i g    f i l e s
#----------------------------------------------------------
#

mkdir ${WORKDIR}
cd ${WORKDIR}
mkdir dataCards_${Name}
ls
#
#----------------------------------------------------------
# e x e c u t e   j o b
#----------------------------------------------------------
#
for ((i=MIN;i<=MAX;i=i+STEP)); do
cd $SRC
python runInterpretation.py -c $CONFIG -m $i -w -t ${LABEL:2} --signif
cd ${WORKDIR}
export DATACARD=$DATACARDSTUB${i}.txt
echo $DATACARD
for file in ${SRCDIR}/*$MASS*.root; do cp "$file" dataCards_${Name} ;done
cp ${SRCDIR}/${DATACARD} .
combine -M HybridNew $DATACARD -n $Name -m $i --signif  --pvalue --testStat LHC -T 10000  $LIBPART
done


#
#----------------------------------------------------------
# c o p y   o u t p u t
#----------------------------------------------------------
#
if [ ! -d "$OUTDIR" ]; then
mkdir ${OUTDIR}
fi
if [ ! -d "$OUTDIR/$TAG" ]; then
mkdir ${OUTDIR}/$TAG
fi
echo "Finished -- ls dir: "
pwd
ls -lrt 
echo "Copying to " ${OUTDIR}/$TAG
cp ${WORKDIR}/*.root ${OUTDIR}/$TAG/
echo "what is in " ${OUTDIR}/$TAG
ls -lrt ${OUTDIR}/$TAG/ 

#
# show what is being left behind...
#
#  echo ""
#  echo "Current directory:"
#  pwd
#  ls -lrt
#
  end=`date`
  echo ""
  echo "Job end `date`"
  echo ""
# 
echo "=> " $PBS_JOBNAME $start $end `uname -n` $processor $rate
#
rm -r ${WORKDIR}
exit ${status}

