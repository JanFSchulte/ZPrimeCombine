/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 
#include "ZPrimeBkgPdf.h"
#include "Riostream.h" 

#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(ZPrimeBkgPdf) 

  const double ZPrimeBkgPdf::kCacheMin_=0;
  const double ZPrimeBkgPdf::kCacheMax_=5000;
 
ZPrimeBkgPdf::ZPrimeBkgPdf(const char *name, const char *title, 
                        RooAbsReal& _mass,
                        RooAbsReal& _bkg_a,
                        RooAbsReal& _bkg_b,
                        RooAbsReal& _bkg_c,
			RooAbsReal& _bkg_d,
			RooAbsReal& _bkg_e,
                        RooAbsReal& _bkg_syst_a,
                        RooAbsReal& _bkg_syst_b) :
   RooAbsPdf(name,title), 
   mass("mass","mass",this,_mass),
   bkg_a("bkg_a","bkg_a",this,_bkg_a),
   bkg_b("bkg_b","bkg_b",this,_bkg_b),
   bkg_c("bkg_c","bkg_c",this,_bkg_c),
   bkg_d("bkg_d","bkg_d",this,_bkg_d),
   bkg_e("bkg_e","bkg_e",this,_bkg_e),
   bkg_syst_a("bkg_syst_a","bkg_syst_a",this,_bkg_syst_a),
   bkg_syst_b("bkg_syst_b","bkg_syst_b",this,_bkg_syst_b),
   cache_(kNrCacheBins_,-1)
 { 
   //std::cout <<"created ZPrimeBkgPdf"<<std::endl;
 } 


 ZPrimeBkgPdf::ZPrimeBkgPdf(const ZPrimeBkgPdf& other, const char* name) :  
   RooAbsPdf(other,name), 
   mass("mass",this,other.mass),
   bkg_a("bkg_a",this,other.bkg_a),
   bkg_b("bkg_b",this,other.bkg_b),
   bkg_c("bkg_c",this,other.bkg_c),
   bkg_d("bkg_d",this,other.bkg_d),
   bkg_e("bkg_e",this,other.bkg_e),
   bkg_syst_a("bkg_syst_a",this,other.bkg_syst_a),
   bkg_syst_b("bkg_syst_b",this,other.bkg_syst_b),
   cache_(other.cache_)
 { 
   //std::cout <<"copied ZPrimeBkgPdf"<<std::endl;
 } 



 Double_t ZPrimeBkgPdf::evaluate() const 
 { 
   size_t cacheIndex = cacheBinNr(mass);
   //   double returnVal=-1;
   if(cacheIndex<cache_.size()){
     if(cache_[cacheIndex]<0){
       //       std::cout <<"cache "<<cacheIndex<<" for mass "<<mass<<std::endl;
       cache_[cacheIndex] = evalPdfNoNuisance();
     }
     //  std::cout <<"cache "<<cacheIndex<<" for mass "<<mass<<" already filled "<<std::endl;
     return cache_[cacheIndex]*evalPdfNuisance();
       
   }else return evalPdfNoNuisance()*evalPdfNuisance();
   
   // std::cout <<this<<" mass "<<mass<<" bkg a "<<bkg_a<<" bkg b "<<bkg_b<<" bkg c "<<bkg_c<<" bkg_d "<<bkg_d<<" bkg sys "<<bkg_syst_a<<" "<<bkg_syst_b<<" return val "<<returnVal<<std::endl;
   // return returnVal;
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   //   return exp(mass*bkg_a+mass*mass*bkg_b)*pow(mass,bkg_c)*(bkg_syst_a+bkg_syst_a*mass) ; 
 } 



