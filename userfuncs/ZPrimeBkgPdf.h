/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory and then modified by       *
 * Sam Harper to make it fast                                                * 
 *****************************************************************************/

#ifndef ZPRIMEBKGPDF
#define ZPRIMEBKGPDF

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

#include <limits> 

class ZPrimeBkgPdf : public RooAbsPdf {
public:
  ZPrimeBkgPdf() {} ; 
  ZPrimeBkgPdf(const char *name, const char *title,
	      RooAbsReal& _mass,
	      RooAbsReal& _bkg_a,
	      RooAbsReal& _bkg_b,
	      RooAbsReal& _bkg_c, 
	      RooAbsReal& _bkg_d,
	      RooAbsReal& _bkg_e,
	      RooAbsReal& _bkg_syst_a,
	      RooAbsReal& _bkg_syst_b);
  ZPrimeBkgPdf(const ZPrimeBkgPdf& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new ZPrimeBkgPdf(*this,newname); }
  inline virtual ~ZPrimeBkgPdf() { }

protected:

  RooRealProxy mass ;
  RooRealProxy bkg_a ;
  RooRealProxy bkg_b ;
  RooRealProxy bkg_c ; 
  RooRealProxy bkg_d ;
  RooRealProxy bkg_e ;
  RooRealProxy bkg_syst_a ;
  RooRealProxy bkg_syst_b ;
  
  Double_t evaluate() const ;

  mutable std::vector<double> cache_;
  static const int kNrCacheBins_ = 5000000;
  static const double kCacheMin_;
  static const double kCacheMax_; 
  static double step(){return (kCacheMax_ - kCacheMin_)/kNrCacheBins_;}
  static size_t cacheBinNr(double mass){return mass <kCacheMin_ || mass>=kCacheMax_ ? std::numeric_limits<size_t>::max() : 
      (mass-kCacheMin_)/step(); //meh good enough, if we're worrying about MeV precision on the mass well...
  }
  
  double evalPdfNoNuisance()const{return bkg_a*exp(mass*bkg_b+mass*mass*bkg_c+mass*mass*mass*bkg_d)*pow(mass,bkg_e);}
  double evalPdfNuisance()const{return bkg_syst_a+bkg_syst_b*mass;}
  
  
private:

  ClassDef(ZPrimeBkgPdf,1) // Your description goes here...
};
 
#endif
