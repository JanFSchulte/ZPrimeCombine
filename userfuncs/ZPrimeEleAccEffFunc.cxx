/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

// class declaration include file below retrieved from workspace code storage
#include "ZPrimeEleAccEffFunc.h"
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(ZPrimeEleAccEffFunc) 

 ZPrimeEleAccEffFunc::ZPrimeEleAccEffFunc(const char *name, const char *title, 
                        RooAbsReal& _eff_scale,
                        RooAbsReal& _eff_a,
                        RooAbsReal& _eff_b,
                        RooAbsReal& _peak,
                        RooAbsReal& _eff_c,
                        RooAbsReal& _eff_d,
                        RooAbsReal& _eff_e) :
   RooAbsReal(name,title), 
   eff_scale("eff_scale","eff_scale",this,_eff_scale),
   eff_a("eff_a","eff_a",this,_eff_a),
   eff_b("eff_b","eff_b",this,_eff_b),
   peak("peak","peak",this,_peak),
   eff_c("eff_c","eff_c",this,_eff_c),
   eff_d("eff_d","eff_d",this,_eff_d),
   eff_e("eff_e","eff_e",this,_eff_e)
 { 
 } 


 ZPrimeEleAccEffFunc::ZPrimeEleAccEffFunc(const ZPrimeEleAccEffFunc& other, const char* name) :  
   RooAbsReal(other,name), 
   eff_scale("eff_scale",this,other.eff_scale),
   eff_a("eff_a",this,other.eff_a),
   eff_b("eff_b",this,other.eff_b),
   peak("peak",this,other.peak),
   eff_c("eff_c",this,other.eff_c),
   eff_d("eff_d",this,other.eff_d),
   eff_e("eff_e",this,other.eff_e)
 { 
 } 



 Double_t ZPrimeEleAccEffFunc::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return eff_scale*(eff_a+eff_b/(peak+eff_c)+eff_d/(peak*peak+eff_e)) ; 
 } 



