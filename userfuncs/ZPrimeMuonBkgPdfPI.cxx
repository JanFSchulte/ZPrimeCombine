/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "ZPrimeMuonBkgPdfPI.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(ZPrimeMuonBkgPdfPI) 

 ZPrimeMuonBkgPdfPI::ZPrimeMuonBkgPdfPI(const char *name, const char *title, 
                        RooAbsReal& _mass,
                        RooAbsReal& _bkg_a,
                        RooAbsReal& _bkg_b,
                        RooAbsReal& _bkg_c,
                        RooAbsReal& _bkg_d,
                        RooAbsReal& _bkg_e,
                        RooAbsReal& _bkg_syst_a,
                        RooAbsReal& _bkg_syst_b) :
   RooAbsPdf(name,title), 
   mass("mass","mass",this,_mass),
   bkg_a("bkg_a","bkg_a",this,_bkg_a),
   bkg_b(" bkg_b"," bkg_b",this,_bkg_b),
   bkg_c(" bkg_c"," bkg_c",this,_bkg_c),
   bkg_d(" bkg_d"," bkg_d",this,_bkg_d),
   bkg_e(" bkg_e"," bkg_e",this,_bkg_e),
   bkg_syst_a(" bkg_syst_a"," bkg_syst_a",this,_bkg_syst_a),
   bkg_syst_b(" bkg_syst_b"," bkg_syst_b",this,_bkg_syst_b)
 { 
 } 


 ZPrimeMuonBkgPdfPI::ZPrimeMuonBkgPdfPI(const ZPrimeMuonBkgPdfPI& other, const char* name) :  
   RooAbsPdf(other,name), 
   mass("mass",this,other.mass),
   bkg_a("bkg_a",this,other.bkg_a),
    bkg_b("bkg_b",this,other.bkg_b),
    bkg_c("bkg_c",this,other.bkg_c),
    bkg_d("bkg_d",this,other.bkg_d),
    bkg_e("bkg_e",this,other.bkg_e),
    bkg_syst_a("bkg_syst_a",this,other.bkg_syst_a),
    bkg_syst_b("bkg_syst_b",this,other.bkg_syst_b)
 { 
 } 



 Double_t ZPrimeMuonBkgPdfPI::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return exp(bkg_a+mass*bkg_b+mass*mass*bkg_c+mass*mass*mass*bkg_d)*pow(mass,bkg_e)*(bkg_syst_a + bkg_syst_b*mass)*std::min(1.01696-7.73522E-5*mass+6.69239E-9*mass*mass,1.)*(1.025 + 7.118e-06*mass + 1.457e-09*mass*mass) ; 
 } 
