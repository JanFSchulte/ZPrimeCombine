/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

// class declaration include file below retrieved from workspace code storage
#include "ZPrimeMuonResSys.h"
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(ZPrimeMuonResSys) 

 ZPrimeMuonResSys::ZPrimeMuonResSys(const char *name, const char *title, 
                        RooAbsReal& _peak,
                        RooAbsReal& _sys_a,
                        RooAbsReal& _sys_b,
                        RooAbsReal& _sys_c,
				    RooAbsReal& _peakCutOff) :
   RooAbsReal(name,title), 
   peak("peak","peak",this,_peak),
   sys_a("sys_a","sys_a",this,_sys_a),
   sys_b("sys_b","sys_b",this,_sys_b),
   sys_c("sys_c","sys_c",this,_sys_c),
   peakCutOff("peakCutOff","peakCutOff",this,_peakCutOff)
 { 
 } 


 ZPrimeMuonResSys::ZPrimeMuonResSys(const ZPrimeMuonResSys& other, const char* name) :  
   RooAbsReal(other,name), 
   peak("peak",this,other.peak),
   sys_a("sys_a",this,other.sys_a),
   sys_b("sys_b",this,other.sys_b),
   sys_c("sys_c",this,other.sys_c),
   peakCutOff("peakCutOff",this,other.peakCutOff)
 { 
 } 



 Double_t ZPrimeMuonResSys::evaluate() const 
 { 
   double mass = std::min(peak,peakCutOff);
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return sys_a+sys_b*mass+sys_c*mass*mass;
 } 



