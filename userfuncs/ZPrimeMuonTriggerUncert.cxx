/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

// class declaration include file below retrieved from workspace code storage
#include "ZPrimeMuonTriggerUncert.h"
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(ZPrimeMuonTriggerUncert) 

ZPrimeMuonTriggerUncert::ZPrimeMuonTriggerUncert(const char *name, const char *title, 
					   RooAbsReal& zPrimeMass,
					   RooAbsReal& cat,
					   RooAbsReal& add):
  RooAbsReal(name,title), 
  zPrimeMass_("zPrimeMass","zPrimeMass",this,zPrimeMass),
  cat_("cat","cat",this,cat),
  add_("add","add",this,add)
{ 
} 


ZPrimeMuonTriggerUncert::ZPrimeMuonTriggerUncert(const ZPrimeMuonTriggerUncert& other, const char* name) :  
  RooAbsReal(other,name), 
  zPrimeMass_("zPrimeMass",this,other.zPrimeMass_),
  cat_("cat",this,other.cat_),
  add_("add",this,other.add_)
{ 
} 


Double_t ZPrimeMuonTriggerUncert::evaluate() const 
{ 
  // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
  if (cat_ == 0) return 1. +  sqrt(add_*add_ + pow((0.987826232915 + -7.81615984033e-08*zPrimeMass_)/(0.985548976863+ -2.28261035836e-07*zPrimeMass_) -1.,2)); 
  else if (cat_ == 1) return 1. + sqrt(add_*add_ + pow((0.971242305389  + 3.10628148131e-07*zPrimeMass_ ) / (0.987369135229 + -3.75634851186e-05*zPrimeMass_ + 2.48504956152e-09*zPrimeMass_*zPrimeMass_) -1. ,2));
  else if (cat_ == 2) return 1. + sqrt(add_*add_ +pow((0.972352522752 + -3.34032692503e-06*zPrimeMass_ + 1.61745590874e-10*zPrimeMass_*zPrimeMass_) / (0.981606029688 + -1.39766860383e-05*zPrimeMass_ + -9.42079658943e-09*zPrimeMass_*zPrimeMass_) -1. ,2));
  else if (cat_ == 3) {
	double effPart = std::max(0.,std::min(1.,1.003 -0.000132*zPrimeMass_-0.000000024*zPrimeMass_*zPrimeMass_)) -1.;
	double trigPart = (0.972352522752 + -3.34032692503e-06*zPrimeMass_ + 1.61745590874e-10*zPrimeMass_*zPrimeMass_) / (0.981606029688 + -1.39766860383e-05*zPrimeMass_ + -9.42079658943e-09*zPrimeMass_*zPrimeMass_) -1.;
	return 1. + sqrt( pow(effPart,2) + pow(trigPart,2)   );
  }
  else return 1.;
} 



